name: Build packages for a particular distro version and architecture
inputs:
  vendor:
    description: Distribution vendor
    required: true
  codename:
    description: Distribution codename or release
    required: true
  architecture:
    description: Package build host architecture
    required: true
  dockerRegistryURL:
    description:  Docker registry URL
    required: true
  dockerRegistryRepo:
    description:  Docker registry repo
    required: true
  dockerRegistryUser:
    description:  Docker registry user
    required: true
  signPackages:
    description: Whether to sign packages, true or false
    required: false
    default: false
  packageSigningKey:
    description: Secret GPG signing key
    required: false
  packageSigningKeyID:
    description: GPG signing key ID
    required: false
  uploadDirectory:
    description: Where to place built packages
    required: false
    default: ./packages
runs:
  using: "composite"
  steps:

  - name: >
      Configure source package for ${{ inputs.vendor }}
      ${{ inputs.codename}}, ${{ inputs.architecture }}
    shell: bash
    env:
      CODENAME: ${{ inputs.codename }}
      ARCHITECTURE: ${{ inputs.architecture }}
      DOCKER_REGISTRY_URL: ${{ inputs.dockerRegistryURL }}
      DOCKER_REGISTRY_REPO: ${{ inputs.dockerRegistryRepo }}
      DOCKER_REGISTRY_USER: ${{ inputs.dockerRegistryUser }}
    run: |
      set -e
      echo ::group::Configure source package
      rundocker $CODENAME $ARCHITECTURE \
          buildpackages --configure-source
      echo ::endgroup::

  - name: >
      Build Debian packages for ${{ inputs.vendor }}
      ${{ inputs.codename}}, ${{ inputs.architecture }}
    shell: bash
    env:
      CODENAME: ${{ inputs.codename }}
      ARCHITECTURE: ${{ inputs.architecture }}
      DOCKER_REGISTRY_URL: ${{ inputs.dockerRegistryURL }}
      DOCKER_REGISTRY_REPO: ${{ inputs.dockerRegistryRepo }}
      DOCKER_REGISTRY_USER: ${{ inputs.dockerRegistryUser }}
    run: |
      set -e
      echo ::group::Build debian packages for $CODENAME $ARCHITECTURE
      rundocker $CODENAME $ARCHITECTURE \
          buildpackages --build-packages
      echo ::endgroup::

  - name: Sign packages with Signer Key
    env:
      CODENAME: ${{ inputs.codename }}
      ARCHITECTURE: ${{ inputs.architecture }}
      DOCKER_REGISTRY_URL: ${{ inputs.dockerRegistryURL }}
      DOCKER_REGISTRY_REPO: ${{ inputs.dockerRegistryRepo }}
      DOCKER_REGISTRY_USER: ${{ inputs.dockerRegistryUser }}
      GNUPGHOME: /tmp/secrets_mountpoint
      PACKAGE_SIGNING_KEY: ${{ inputs.packageSigningKey }}
      SIGN_PACKAGES: ${{ github.event_name == 'push' }}
    shell: bash
    run: |
      set -e
      if test $SIGN_PACKAGES != true; then
          echo "Not signing packages:  Not a Github 'push' event"
          exit 0
      fi
      if test -z "PACKAGE_SIGNING_KEY"; then
          echo "Not signing packages:  No PACKAGE_SIGNING_KEY secret"
          exit 0
      fi

      echo ::group::Creating tmpfs for $GNUPGHOME
      (
          set -ex
          mkdir -p $GNUPGHOME
          MOUNT_OPTS="size=50m,mode=0700,uid=$(id -u),gid=$(id -g)"
          sudo mount -t tmpfs -o $MOUNT_OPTS tmpfs $GNUPGHOME
      )
      echo ::endgroup::

      # Doesn't work on Stretch; anyway, buildpackages --sign-packages finds the key
      # echo ::group::Extracting GPG signing key ID from environment
      # export PACKAGE_SIGNING_KEY_ID=$(
      #     rundocker --env GNUPGHOME --env PACKAGE_SIGNING_KEY \
      #             --volume $GNUPGHOME \
      #             $CODENAME $ARCHITECTURE \
      #         buildpackages \
      #             --print-gpg-keyid-from-secret-env-var PACKAGE_SIGNING_KEY \
      # )
      # echo ::endgroup::
      # echo "Set PACKAGE_SIGNING_KEY_ID=$PACKAGE_SIGNING_KEY_ID"

      echo ::group::Importing signing keys into $GNUPGHOME
      (
          set -ex
          rundocker --env PACKAGE_SIGNING_KEY --env GNUPGHOME \
                  --volume $GNUPGHOME \
                  $CODENAME $ARCHITECTURE \
              buildpackages --import-gpg-from-secret-env-var PACKAGE_SIGNING_KEY
      )
      echo ::endgroup::

      echo ::group::Signing packages
      (
          set -ex
          rundocker --env GNUPGHOME --env PACKAGE_SIGNING_KEY_ID \
                  --volume $GNUPGHOME \
                  $CODENAME $ARCHITECTURE \
              buildpackages --sign-packages
      )
      echo ::endgroup::

      echo ::group::Removing tmpfs for $GNUPGHOME
      (
          set -x
          sudo umount $GNUPGHOME
      )
      echo ::endgroup::

  - name: Prepare build artifact for upload
    env:
      CODENAME: ${{ inputs.codename }}
      ARCHITECTURE: ${{ inputs.architecture }}
      UPLOAD_DIRECTORY: ${{ inputs.uploadDirectory }}
      DOCKER_REGISTRY_URL: ${{ inputs.dockerRegistryURL }}
      DOCKER_REGISTRY_REPO: ${{ inputs.dockerRegistryRepo }}
      DOCKER_REGISTRY_USER: ${{ inputs.dockerRegistryUser }}
    shell: bash
    run: |
      set -e
      echo ::group::Preparing build artifacts for upload
      mkdir $UPLOAD_DIRECTORY
      rundocker --notty $CODENAME $ARCHITECTURE \
          buildpackages --list-packages --with-buildinfo --with-changes \
          | xargs -t -I '{}' cp -v '{}' \
            $UPLOAD_DIRECTORY
      echo ::endgroup::
